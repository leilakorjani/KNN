import pandas as pd 
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
# Read the 'KNN_Project_Data csv file into a dataframe 
df=pd.read_csv('E:/courses/python/Refactored_Py_DS_ML_Bootcamp-master/14-K-Nearest-Neighbors/KNN_Project_Data.csv')
df.head()
sns.pairplot(df) 
#  Standardize the variables
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
scaler.fit(df.drop("TARGET CLASS",axis=1))
scaler_features=scaler.transform(df.drop("TARGET CLASS",axis=1))
df_feats=pd.DataFrame(scaler_features,columns=df.columns[:-1])

# Split data into a training set and a testing set
from sklearn.model_selection import train_test_split
X=df_feats
y=df["TARGET CLASS"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

# Using KNN
from sklearn.neighbors import KNeighborsClassifier
KNN=KNeighborsClassifier(n_neighbors=1)
KNN.fit(X_train,y_train)

# Evaluate KNN model
preds=KNN.predict(X_test)
from sklearn.metrics import confusion_matrix,classification_report
print(classification_report(preds,y_test))
print(confusion_matrix(preds,y_test))

# using elbow method for choosing K
error_rate=[]

for i in range(1,40):
    KNN=KNeighborsClassifier(n_neighbors=i)
    KNN.fit(X_train,y_train)
    preds_i=KNN.predict(X_test)
    error_rate.append(np.mean(preds_i != y_test))

plt.figure(figsize=(10,6))
plt.plot(range(1,40), error_rate, color="Blue", marker="o",markerfacecolor="red",markersize=10,linestyle="dashed")
plt.title="Error Rate"
plt.xlabel="k"
plt.ylabel="error rate"

# retrain model with new selected K value
KNN=KNeighborsClassifier(n_neighbors=25)
KNN.fit(X_train,y_train)
preds=KNN.predict(X_test)
print(classification_report(preds,y_test))
print(confusion_matrix(preds,y_test))
